# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
    "package.py",
    "resources",
    "setup.py",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12+ syntax.
target-version = "py311"

[lint]
select = [
    "E4",     # pycodestyle errors
    "E7",     # pycodestyle errors
    "E9",     # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "S",      # bandit
    "EXE",    # flake8-executable
    "N",      # pep8-naming
    "D",      # pydocstyle
    "ASYNC",  # flake8-async
    "TC",     # flake8-type-checking
    "SIM",    # flake8-simplify
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "TRY",    # tryceratops
    "ARG",    # flake8-unused-arguments
    "PGH",    # pygrep-hooks
]
ignore = [
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**options`
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ARG002", # Unused method argument
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic methods
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "E501",   # Line too long (handled by black)
    "PGH003", # Use specific rule codes when ignoring type issues
    "S101",   # Use of `assert` detected.
    "S311",   # Pseudo-random generators are not suitable for cryptographic purposes
    "TRY003", # Avoid specifying long messages outside the exception class
]

fixable = [
    "ALL",  # All errors and warnings
]
unfixable = [
    "ERA",  # do not autoremove commented out code
    "F841", # local variable is assigned to but never used
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.isort]
known-first-party = []
known-third-party = [
    "django", "pygments", "rest_framework", "psycopg", "pillow",
    "drf_spectacular", "dotenv", "httpx", "argon2", "fernet",
    "django_extensions", "django_filters", "pydantic", "tldextract", "requests"
]

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"__init__.py" = ["E402"]
"app/*" = ["D101"]
"commands.py" = ["F401"]
"scripts/*" = ["S104", "S607", "S603"]
"**/{tests,docs,tools}/*" = [
    "ANN001", # Missing return type annotation for public function
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing type annotation for `*args`
    "ARG005", # Unused argument
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "E402",   # Module level import not at top of file
    "F401",   # Module imported but unused
    "F841",   # Local variable is assigned to but never used
    "I001",   # Unused import
    "S106",   # Possible hardcoded password assigned to argument: "password"
    "PT011",  # Exception is too broad, set the `match` parameter
]

[format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "Pipfile",
    "Pipfile.lock",
]

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.params.Depends",
    "fastapi.Query",
    "fastapi.params.Query"
]
